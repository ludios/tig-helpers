#!/usr/bin/python

from __future__ import print_function

import re
import sys
import subprocess

def get_user_and_repo(origin_url):
	if origin_url.startswith("https://github.com/"):
		_, _, _, user, repo = origin_url.split("/")
	elif origin_url.startswith("git@github.com:"):
		_, user_repo = origin_url.split(":", 1)
		user, repo   = user_repo.split("/", 1)
	else:
		raise ValueError("remote.origin.url did not start with https://github.com/ or git@github.com:")
	if repo.endswith(".git"):
		repo = repo[:-4]
	return user, repo

assert get_user_and_repo("https://github.com/user/repo")     == ("user", "repo")
assert get_user_and_repo("https://github.com/user/repo.git") == ("user", "repo")
assert get_user_and_repo("git@github.com:user/repo")         == ("user", "repo")
assert get_user_and_repo("git@github.com:user/repo.git")     == ("user", "repo")

# https://help.github.com/articles/autolinked-references-and-urls/#issues-and-pull-requests
ISSUE_NUMBER_RE = re.compile(r"(?:#|GH-)(\d+)\b")

def get_issue_numbers(message):
	return map(int, re.findall(ISSUE_NUMBER_RE, message))

assert get_issue_numbers("#1") == [1]
assert get_issue_numbers("#1 #2000") == [1, 2000]
assert get_issue_numbers("Fixes#1 #2000)") == [1, 2000]
assert get_issue_numbers("Fixes#1 #2000W") == [1]
assert get_issue_numbers("Fixes#1 GH-2000") == [1, 2000]

def get_origin_url():
	"""
	Returns remote.origin.url for the git repo in the current directory.
	"""
	# Why not git ls-remote?  Because it won't work in a detached HEAD state.
	# See https://goo.gl/yc3QOe
	out = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).rstrip()
	print(out)
	return out

def main():
	commit     = sys.argv[1]
	message    = subprocess.check_output(["git", "show", "--format=%B", commit])
	user, repo = get_user_and_repo(get_origin_url())
	for issue in get_issue_numbers(message):
		subprocess.call(["xdg-open", "https://github.com/%s/%s/issues/%d" % (user, repo, issue)])

if __name__ == "__main__":
	main()
